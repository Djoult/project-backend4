{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.2",
    "title": "Swagger test",
    "description": "Showing off swagger-ui-express",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [
    { "url": "https://drinkmaster-backend.onrender.com/api" },
    { "url": "http://localhost:3000/api" }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Recipes",
      "description": "Recipes endpoints"
    },
    {
      "name": "Glass list",
      "description": "Glass list endpoints"
    },
    {
      "name": "Subscribe",
      "description": "Subscribe endpoints"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/auth/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Return current user's data",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/auth/update": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Return uploaded avatarURL/name",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Update username",
          "required": false,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequestMultipart"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/auth/verify": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerifyEmailRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operations",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VerifyResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to log in user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/recipes/category-list": {
      "get": {
        "tags": ["Recipes"],
        "summary": "return a categories of recipes",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "required": false,
            "name": "sort",
            "type": "string",
            "description": "Ascending or descending sorting. Default: asc"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category-list"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/recipes/ingredient-list": {
      "get": {
        "tags": ["Recipes"],
        "summary": "return ingridients that will be in the sample",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "required": false,
            "name": "sort",
            "type": "string",
            "description": "Ascending or descending sorting. Default: asc"
          },
          {
            "in": "query",
            "required": false,
            "name": "title",
            "type": "string",
            "description": "Title"
          },
          {
            "in": "query",
            "required": false,
            "name": "page",
            "type": "integer",
            "description": "Page"
          },
          {
            "in": "query",
            "required": false,
            "name": "limit",
            "type": "integer",
            "description": "Limit"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ingredient-list"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/recipes/main-page": {
      "get": {
        "tags": ["Recipes"],
        "summary": "return list of recipes of given categories for the main page",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "required": false,
            "name": "category",
            "type": "string",
            "description": "Category"
          },
          {
            "in": "query",
            "required": false,
            "name": "samples",
            "type": "integer",
            "description": "Samples"
          },
          {
            "in": "query",
            "required": false,
            "name": "categoryCount",
            "type": "integer",
            "description": "Category Count"
          },
          {
            "in": "query",
            "required": false,
            "name": "thumb",
            "type": "boolean",
            "description": "Thumb"
          },
          {
            "in": "query",
            "required": false,
            "name": "instructions",
            "type": "boolean",
            "description": "Instructions"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MainPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/recipes/search": {
      "get": {
        "tags": ["Recipes"],
        "summary": "return search by specified criteria with the ability to sort by one field",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "required": false,
            "name": "drink",
            "type": "string",
            "description": "Drink"
          },
          {
            "in": "query",
            "required": false,
            "name": "category",
            "type": "string",
            "description": "Category"
          },
          {
            "in": "query",
            "required": false,
            "name": "ingredient",
            "type": "string",
            "description": "Ingredient"
          },
          {
            "in": "query",
            "required": false,
            "name": "glass",
            "type": "string",
            "description": "Glass"
          },
          {
            "in": "query",
            "required": false,
            "name": "page",
            "type": "integer",
            "description": "Page"
          },
          {
            "in": "query",
            "required": false,
            "name": "limit",
            "type": "integer",
            "description": "Limit"
          },
          {
            "in": "query",
            "required": false,
            "name": "own",
            "type": "boolean",
            "description": "Own"
          },
          {
            "in": "query",
            "required": false,
            "name": "favorite",
            "type": "boolean",
            "description": "Favorite"
          },
          {
            "in": "query",
            "required": false,
            "name": "thumb",
            "type": "boolean",
            "description": "Thumb"
          },
          {
            "in": "query",
            "required": false,
            "name": "instructions",
            "type": "boolean",
            "description": "Instructions"
          },
          {
            "in": "query",
            "required": false,
            "name": "sort",
            "type": "string",
            "description": "Sort"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Search"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/recipes/popular": {
      "get": {
        "tags": ["Recipes"],
        "summary": "return list of recipes added by users to favorites",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "required": false,
            "name": "ingredient",
            "type": "string",
            "description": "Ingredient"
          },
          {
            "in": "query",
            "required": false,
            "name": "category",
            "type": "string",
            "description": "Category"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Popular"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/recipes/favorite": {
      "get": {
        "tags": ["Recipes"],
        "summary": "return list of recipes that the current user has added to favorites",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "required": false,
            "name": "ingredient",
            "type": "string",
            "description": "Ingredient"
          },
          {
            "in": "query",
            "required": false,
            "name": "category",
            "type": "string",
            "description": "Category"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Popular"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/recipes/favorite/{id}": {
      "get": {
        "tags": ["Recipes"],
        "summary": "return recipe by id, which is added to favorites by the current user",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
						"in": "path",
						"name": "id",
						"required": true,
						"type": "string",
						"description": "Enter ID of recipe"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteById"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": ["Recipes"],
        "summary": "return adds/removes a recipe with the given id to favorites",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
						"in": "path",
						"name": "id",
						"required": true,
						"type": "string",
						"description": "Enter ID of recipe"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteById"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "recipes/own": {
			"get": {
				"tags": ["Recipes"],
				"summary": "return list of all recipes added by the current user",
				"security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "required": false,
            "name": "ingredient",
            "type": "string",
            "description": "Ingredient"
          },
          {
            "in": "query",
            "required": false,
            "name": "category",
            "type": "string",
            "description": "Category"
          }
        ],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OwnAll"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {}
					},
					"404": {
						"description": "Not found",
						"content": {}
					},

					"500": {
						"description": "Server error",
						"content": {}
					}
				}
			},
			"post": {
				"tags": ["Recipes"],
				"summary": "adding own recipe",
				"security": [{ "Bearer": [] }],
				"parameters": [],
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"required": [
								"drink",
								"category",
								"glass",
								"instructions",
								"ingredients"
							],
							"schema": {
								"$ref": "#/components/schemas/My-recipe"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Recipe added successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/My-recipe-Response"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {}
					},
					"401": {
						"description": "Unauthorized",
						"content": {}
					},
					"404": {
						"description": "Not found",
						"content": {}
					},

					"409": {
						"description": "Name of drink already exists",
						"content": {}
					},

					"500": {
						"description": "Server error",
						"content": {}
					}
				}
			}
		},
    "/recipes/own/{id}": {
      "get": {
        "tags": ["Recipes"],
        "summary": "return recipe by id added by the current user",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
						"in": "path",
						"name": "id",
						"required": true,
						"type": "string",
						"description": "Get own recipe by id"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOwnById"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      },
			"delete": {
				"tags": ["Recipes"],
				"summary": "removes a recipe by id added by the current user",
				"security": [{ "Bearer": [] }],

				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"type": "string",
						"description": "ID of the recipe to be removed"
					}
				],

				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RemoveOwnById"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {}
					},
					"404": {
						"description": "Not found",
						"content": {}
					},

					"500": {
						"description": "Server error",
						"content": {}
					}
				}
			}
    }

  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Qwerty123"
          }
        }
      },
      "RegistrationResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "User's email",
              "format": "email"
            },
            "userId": {
              "type": "number",
              "description": "User's id",
              "example": "32143232436545474"
            }
          }
        },
        "example": [
          { "email": "1@gmail.com", "userId": "1" },
          { "email": "2@gmail.com", "userId": "2" }
        ]
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Test123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Authentication token",
            "example": "wre35R4y3234.jdrit45fk4OrJ45.235wetKFF3460"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name"
              },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar URL"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            },
            "example": {
              "name": "Alex",
              "email": "user@example.com",
              "avatarURL": "https://example.com/avatar1.jpg"
            }
          }
        }
      },
      "CurrentResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name"
              },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar URL"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            },
            "example": {
              "name": "Alex",
              "email": "user@example.com",
              "avatarURL": "https://example.com/avatar1.jpg"
            }
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Logout succes"
          }
        },
        "example": {
          "message": "Logout succes"
        }
      },
      "UpdateRequestMultipart": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary"
          },
          "name": {
            "type": "string"
          }
        },
        "example": {
          "avatar": "<binary_data>",
          "name": "New Username"
        }
      },
      "UpdateResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Username updated"
              },
              "avatarURL": {
                "type": "string",
                "description": "User avatar URL updated"
              }
            },
            "example": {
              "name": "username or upload-username",
              "avatarURL": "https://example.com/update-avatar1.jpg"
            }
          }
        }
      },
      "VerifyEmailRequest": {
        "type": "object",
        "properties": {
          "verificationCode": {
            "type": "string",
            "description": "Verification emailr password",
            "example": "qwerty1111111"
          }
        }
      },
      "VerifyResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email user@email.com verified successfully."
          },
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "12345678901112"
          },
          "refreshToken": {
            "type": "string",
            "description": "User's refreshToken",
            "example": "12345678901112"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
